<?php

namespace common\models;

use soft\helpers\Html;
use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "user_salary".
 *
 * @property int $id
 * @property int|null $user_id
 * @property int|null $month
 * @property int|null $year
 * @property float|null $amount
 * @property string|null $comment
 * @property int|null $created_at
 * @property int|null $updated_at
 */
class UserSalary extends \soft\db\ActiveRecord
{
    //<editor-fold desc="Parent" defaultstate="collapsed">

    public function behaviors()
    {
        return array_merge(parent::behaviors(), [
            TimestampBehavior::class
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user_salary';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['pay_amount', "pay_type", "pay_comment"], 'safe'],
            [['user_id', 'month', 'year', 'created_at', 'updated_at'], 'integer'],
            [['amount'], 'number'],
            [['comment'], 'string'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function labels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'user_id' => Yii::t('app', 'User ID'),
            'month' => Yii::t('app', 'Month'),
            'year' => Yii::t('app', 'Year'),
            'amount' => Yii::t('app', 'Amount'),
            'comment' => Yii::t('app', 'Comment'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'payedAmount' => Yii::t('app', "To'langan summa"),
        ];
    }

    //</editor-fold>

    public $pay_amount;
    public $pay_comment;
    public $pay_type;

    public static function calculate()
    {
        $users = User::find()->all();


        foreach ($users as $user) {


            if (!$user->checkRoles(['Rahbar', "admin"])) {

                $oldMonth = (int)date("m", strtotime("-1 month"));
                $oldYear = (int)date("Y", strtotime("-1 month"));

                self::calculateUserSalary($user, $oldMonth, $oldYear);
                self::calculateUserSalary($user, ((int)date("m")), ((int)date("Y")));
            }
        }
    }

    public static function calculateUserSalary($user, $month, $year)
    {


        $currentMonthSalary = UserSalary::find()
            ->andWhere(['user_id' => $user->id])
            ->andWhere(['month' => $month])
            ->andWhere(['year' => $year])
            ->one();
        if (!$currentMonthSalary) {
            $currentMonthSalary = new UserSalary([
                "user_id" => $user->id,
                "month" => $month,
                "year" => $year,
            ]);
            $currentMonthSalary->save();
        }

        $dateString = "{$year}-{$month}-01"; // Set the day to 01
        $lastDayOfMonth = date("Y-m-t", strtotime($dateString));

        $allUserRevenue = UserRevenue::find()
            ->andWhere(['=', "user_id", $user->id])
            ->andWhere(['>=', "created_at", strtotime($dateString)])
            ->andWhere(['<=', "created_at", strtotime($lastDayOfMonth)])
            ->sum("amount");


        $allUserFine = UserFine::find()
            ->andWhere(['=', "user_id", $user->id])
            ->andWhere(['>=', "created_at", strtotime($dateString)])
            ->andWhere(['<=', "created_at", strtotime($lastDayOfMonth)])
            ->sum("amount");

        $currentMonthSalary->amount = $allUserRevenue - $allUserFine + 1000000;
        $currentMonthSalary->save();
    }

    public function getUser()
    {
        return $this->hasOne(User::class, ['id' => "user_id"]);
    }

    public function getPayedAmount()
    {
        return UserSalaryPayment::find()
            ->andWhere(['salary_id' => $this->id])
            ->sum("amount");
    }


}
